#!/usr/bin/env sh

######### SOURCED FILE DETECTION ##########
# Try to execute a `return` statement,
# but do it in a sub-shell and catch the results.
# If this script isn't sourced, that will raise an error.
`return >/dev/null 2>&1`

if [ "$?" = "0" ]
then
    #file is sourced
    :
elif [ -n "$1" ]
then
    echo "Note: This tool can only be run after it's sourced. Try running: "
    echo "    . \`which -a hoard | tail -n 1\`"
    echo "before running 'hoard'.";
fi
###########################################


hoard() {

    #Use default file paths if necessary
    if [ -z "$HOARD_SESSIONS_PATH" ]; then
        HOARD_SESSIONS_PATH="$HOME/.hoard_sessions"
    fi
    if [ -z "$HOARD_BOOKMARKS_PATH" ]; then
        HOARD_BOOKMARKS_PATH="$HOME/.hoard_bookmarks"
    fi


    #
    # MARK : functions to handle saved data
    #

    printSessionsSaved() {
        #list all sessions saved by reading from file.
        i=1
        while IFS= read -r line; do
            timestamp=`echo "$line" | sed -n 's/\(\[[^]]*\]\) *\(.*\)/\1/p'`
            session=`echo "$line" | sed -n 's/\(\[[^]]*\]\) *\(.*\)/\2/p'`
            echo "    $i: $timestamp `echo "$session" | tail -c 40`"
            i=`expr $i+1`
        done < "$1"

        #If index is never updated, the file is empty.
        #Indicate to user that no sessions are found.
        if [ "$i" = "1" ];
        then
            echo "  (There're no sessions saved.)  ";
            return 1
        fi

        #success
        return 0
    }


    hasSessionSaved() {
        #Checks if a session with index exists

        i=1
        while IFS= read -r line; do
            if [ "$i" = "$2" ]
            then
                return 0
            fi

            i=`expr $i+1`
        done < "$1"

        return 1
    }

    bookmarksSaved() {
        #list all sessions saved by reading from file.
        #params:
        #    $1=file,
        #    $2=bkNameToSearch,
        #    $3=modifier [-i for printing only index, -s for printing only bookmark link. ]
        #
        # Not providing anything for $2 and $3 will allow full printout and returns error code 1 if no bookmarks exist.

        i=1
        while IFS= read -r line; do
            name=`echo "$line" | sed -n 's/\(\[[^]]*\]\) *\(.*\)/\1/p'`
            session=`echo "$line" | sed -n 's/\(\[[^]]*\]\) *\(.*\)/\2/p'`

            if [ -z "$3" ]
            then
                echo "    $name: `echo "$session" | tail -c 40`"
            fi

            if [ -z "$2" ]; then
                :
            elif [ "$name" = "[$2]" ]; then
                if [ "$3" = "-i" ]; then
                    echo $i
                    return 0
                else [ "$3" = "-s" ];
                    echo $session
                    return 0
                fi
            fi

            i=`expr $i+1`
        done < "$1"

        #If index is never updated, the file is empty.
        #Indicate to user that no sessions are found.
        if [ "$i" = "1" ] && [ -z "$2" ] && [ -z "$3" ];
        then
            echo "  (There're no bookmarks saved.)  ";
            return 1
        fi

        if [ -z "$2" ]; then
            return 0
        elif [ "$3" = "-i" ]; then
            echo "-1"
            return 1
        elif [ "$3" = "-s" ] || [ -z "$3" ]; then
            echo ""
            return 1
        fi

    }

    #
    # MARK : this is where the magic starts to happen.
    #


    # use "human-readable variable names" >v<

    SELECTED_COMMAND=$1
    SELECTED_NAME=$2

    #we should do validation of input when attaching or deleting sessions.
    if [ `expr "$SELECTED_COMMAND" : "^[aodxr].*$"` -gt 0 ]; then

        #check if the second option is present. If not, request input.
        if [ -z "$SELECTED_NAME" ]; then
            echo "You didn't specify a session number or bookmark name."
            echo

            echo "Your sessions:"
            printSessionsSaved "$HOARD_SESSIONS_PATH"
            res=`expr 0+$?`
            echo
            echo "Your bookmarks:"
            bookmarksSaved "$HOARD_BOOKMARKS_PATH"
            res=`expr $res+$?`
            echo

            while [ -z "$SELECTED_NAME" ]
            do
                if [ "$res" != "2" ]; then
                    echo "Which session or bookmark would you like to use for 'hoard $1'? [ctrl-c to cancel]: "
                    read value
                    SELECTED_NAME=$value
                else
                    return 1;
                fi
                if [ -z "$SELECTED_NAME" ]; then echo "You didn't input anything."; echo; echo; fi
            done
        fi
    fi


    #save if value is a number
    is_number="nil"
    if echo "$SELECTED_NAME" | egrep -q '^[0-9]+$'; then
        is_number="true"
    else
        is_number="false"
    fi

    #run command
    case $SELECTED_COMMAND in
        "ls")

            echo "Saved Sessions:"
            printSessionsSaved $HOARD_SESSIONS_PATH
            ;;

        "lb")

            echo "Saved Bookmarks:"
            bookmarksSaved $HOARD_BOOKMARKS_PATH
            ;;

        "a"|"attach"|"o"|"open")
            if [ "$is_number" = "true" ]; then
                if hasSessionSaved $HOARD_SESSIONS_PATH $SELECTED_NAME; then :
                else
                    echo "session $SELECTED_NAME not found."
                    return 1;
                fi

                line=`cat $HOARD_SESSIONS_PATH | sed -n "`echo "$SELECTED_NAME"`p"`
                echo "attaching session $line"
                session=`echo "$line" | sed -n 's/\(\[[^]]*\]\) *\(.*\)/\2/p'`
                cd "$session"

                if [ "`uname`" = "Darwin" ]; then
                    sed -i '' "`echo "$SELECTED_NAME"`d" $HOARD_SESSIONS_PATH
                else
                    sed -i "`echo "$SELECTED_NAME"`d" $HOARD_SESSIONS_PATH
                fi

            else
                session=`bookmarksSaved $HOARD_BOOKMARKS_PATH $SELECTED_NAME -s`
                if [ ! -z "$session" ]; then
                    echo "opening bookmark $session"
                    cd "$session"
                else
                    echo "bookmark $SELECTED_NAME not found."
                fi
            fi
            ;;

        "rm"|"remove"|"d"|"del"|"delete"|"x")

            if [ "$is_number" = "true" ]; then

                if hasSessionSaved $HOARD_SESSIONS_PATH $SELECTED_NAME; then :

                    line=`cat $HOARD_SESSIONS_PATH | sed -n "`echo "$SELECTED_NAME"`p"`
                    echo "deleting $line"
                    if [ "`uname`" = "Darwin" ]; then
                        sed -i '' "`echo "$SELECTED_NAME"`d" $HOARD_SESSIONS_PATH
                    else
                        sed -i "`echo "$SELECTED_NAME"`d" $HOARD_SESSIONS_PATH
                    fi

                else
                    echo "session $SELECTED_NAME not found."
                    return 1;
                fi

            else

                i=`bookmarksSaved $HOARD_BOOKMARKS_PATH $SELECTED_NAME -i`

                if [ "$i" = "-1" ]
                then
                    echo "bookmark $SELECTED_NAME not found."
                    return 1
                fi

                line=`cat $HOARD_BOOKMARKS_PATH | sed -n "`echo "$i"`p"`
                echo "deleting bookmark $line"
                if [ "`uname`" = "Darwin" ]; then
                    sed -i '' "`echo "$i"`d" $HOARD_BOOKMARKS_PATH
                else
                    sed -i "`echo "$i"`d" $HOARD_BOOKMARKS_PATH
                fi

            fi
            ;;

        "s"|"save"|"b"|"book"|"bookmark")
            if ([ "$is_number" = "true" ] || [ -z "$SELECTED_NAME" ]) && [ "`expr "$SELECTED_COMMAND" : "^[b].*$"`" -eq 0 ]; then
                if [ ! -z "$SELECTED_NAME" ]; then
                    echo "Error: Saving to a specific session number is not yet supported."
                    return 1
                fi
                line="[`date +"%x %X"`] `pwd`"
                echo "saving session $line"
                echo "$line" >> $HOARD_SESSIONS_PATH

            else
                while [ -z $SELECTED_NAME ]; do
                    echo "Please type your bookmark name to save as [ctrl-c to cancel] "
                    read value
                    SELECTED_NAME=$value
                    if [ -z $SELECTED_NAME ]; then
                        echo "You did not enter a value."
                        echo; echo;
                    fi
                done

                is_number="nil"
                if echo "$SELECTED_NAME" | egrep -q '^[0-9]+$'; then
                    is_number="true"
                else
                    is_number="false"
                fi

                if [ "$is_number" = "true" ]; then
                    echo "Error: bookmark name cannot be a number."
                    return 1
                fi

                bkExisting=`bookmarksSaved $HOARD_BOOKMARKS_PATH $SELECTED_NAME -i`
                if [ "$bkExisting" != "-1" ]; then
                    echo "bookmark '$SELECTED_NAME' already exists"
                    return 1
                fi

                line="[$SELECTED_NAME] `pwd`"
                echo "saving bookmark $line"
                echo "$line" >> $HOARD_BOOKMARKS_PATH

            fi
            ;;
        ''|*-h*)
            echo "Usage: hoard COMMAND"
            echo "Simple terminal session/bookmark manager."
            echo
            echo "COMMANDS:"
            echo
            echo "- Session Control"
            echo "  ls - Lists all saved hoard sessions"
            echo "  a  [NUMBER] - Attach to hoard session [NUMBER]"
            echo "  rm [NUMBER] - Delete hoard session [NUMBER]"
            echo "  s  - Save current directory as a hoard session"
            echo
            echo "- Bookmark Control"
            echo "  lb - Lists all saved hoard bookmarks"
            echo "  o  [NAME] - Open hoard bookmark [NAME]"
            echo "  rm [NAME] - Delete hoard bookmark [NAME]"
            echo "  b  [NAME] - Bookmark current directory as [NAME]"
            echo
            echo "SHORTHAND:"
            echo "'h': aliases to 'hoard' if at least one argument is provided,"
            echo "     otherwise to 'hoard ls; hoard lb'"
            echo "'a': aliases to 'hoard attach'"
            echo "'o': aliases to 'hoard open'"
            echo
            echo "Note that most commands are interchangable between session and bookmark controls."
            echo "e.g. 'o' can be used for attaching a session as well as 'a'"
            echo
            echo "Check the README for more info."
            ;;
        *)
            echo "Error: invalid command."
            echo "See 'hoard --help'."
            ;;
    esac
}

h() {
    if [ -z $1 ]; then
        hoard ls
        hoard lb
    else
        hoard $1 $2
    fi
}

a() {
    hoard a $1
}

o() {
    hoard o $1
}


